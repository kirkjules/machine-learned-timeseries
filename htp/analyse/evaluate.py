"""Module used to evaluate trade signals generated from analysis."""
import copy
import numpy as np
import pandas as pd


def entry_exit_combine(df, entry, exit):
    """
    A function to combine entry and exit timestamps for trades generated via
    signal cross logic.

    Parameters
    ----------
    df : pandas.core.frame.DataFrame
        The dataframe that contains the trade signals with respective entry and
        exit columns.

    entry : str
        The label for the column containing entry timestamps.

    exit : str
        The label for the column containing exit timestamps.

    Returns
    -------
    pandas.core.frame.DataFrame
        Dataframe will contain two columns, designated "entry" and "exit"
        respectively. Each row is one trade.
    """
    en_prep = df.entry[df[entry] == True].reset_index()
    en = en_prep.drop("entry", axis=1).rename(columns={"index": "entry"})
    ex_prep = df.exit[df[exit] == True].reset_index()
    ex = ex_prep.drop("exit", axis=1).rename(columns={"index": "exit"})

    # Checking that first signal is not an "exit" which would result in a mis-
    # alignment between entry and exit singals that will not correspond to the
    # same trade.
    # Note: see test script that qualifies the implied logic used to combine
    # entry and exit signal.
    if ex.loc[0][0] < en.loc[0][0]:
        ex_clean = ex.drop([0], inplace=False)
        del ex
        ex = ex_clean.reset_index(drop=True, inplace=False)

    out = pd.concat([en, ex], axis=1)
    trade = out[~out["exit"].isnull()]
    return trade


def signal_cross(df, fast, slow, trade="buy"):
    """
    A function to identify trades based off two signals crossing one another.

    Parameters
    ----------
    df : pandas.core.frame.DataFrame
        The dataframe that contains two signals in their respective columns.
    fast : str
        The column label that corresponds to the fast, more responsive, signal,
        e.g. the smaller period moving average.
    slow : str
        The column label that corresponds to the slow, less responsive, signal,
        e.g. the larger period moving average.
    type : {"buy", "sell"}
        The trade type that should be observed from the signal, i.e. buy or
        sell.

    Results
    -------
    pandas.core.frame.DataFrame
        A pandas dataframe that will contain two columns containing the entry
        and exit timestamps respectively for a trade.

    Examples
    --------
    >>> from htp.api.oanda import Candles
    >>> from htp.analyse import indicator, evaluate
    >>> data_sorted = Candles.to_df(
    ...     instrument="AUD_JPY",
    ...     queryParameters={"granularity": "H1",
    ...                      "from": "2018-06-11T16:00:00.000000000Z",
    ...                      "count": 2000})
    >>> sma_5 = indicator.smooth_moving_average(
    ...     data_sorted, column="close", period=5)
    >>> sma_5_10 = indicator.smooth_moving_average(
    ...     data_sorted, column="close", df2=sma_5, concat=True, period=10)
    >>> signal_cross(sma_5_10, "close_sma_5", "close_sma_10").head(5)
                    entry                exit
    0 2018-06-12 02:00:00 2018-06-12 10:00:00
    1 2018-06-13 03:00:00 2018-06-13 20:00:00
    2 2018-06-14 15:00:00 2018-06-14 17:00:00
    3 2018-06-15 06:00:00 2018-06-15 11:00:00
    4 2018-06-18 08:00:00 2018-06-18 14:00:00
    """
    if trade == "buy":
        system = "{} > {}".format(fast, slow)
        signal = df.apply(
            lambda x: x[fast] > x[slow], axis=1).rename(system).to_frame()
    elif trade == "sell":
        system = "{} < {}".format(fast, slow)
        signal = df.apply(
            lambda x: x[fast] < x[slow], axis=1).rename(system).to_frame()

    signal["prev"] = signal[system].shift(2)
    signal["curr"] = signal[system].shift(1)
    signal["entry"] = signal.apply(
        lambda x: x["prev"] is False and x["curr"] is True, axis=1)
    signal["exit"] = signal.apply(
        lambda x: x["prev"] is True and x["curr"] is False, axis=1)
    entry_exit = entry_exit_combine(signal, "entry", "exit")
    return entry_exit


class Signals:
    """
    Function to calculate and apply a stop loss to each trade.

    By default the system generates an exit signal. This is the base TP/SL.
    A set stop loss is a value set x pips from the entry price. The exit signal
    is generated by the low (buy) or high (sell) crossing that threshold before
    the default system exit is generated.
    A trailing stop loss is a value that is re-calculated each session based on
    a given logic. If the low or high crosses the current threshold for that
    session an exit signal is generated.
    """

    def __init__(self, df_mid, df_entry, df_exit, df_sys, fast, slow,
                 trade="buy", diff_SL=-0.5):

        self.df_mid = df_mid
        self.df_entry = df_entry
        self.df_exit = df_exit

        # Checked against signal_cross method doctest (amended to M15).
        self.sys_en = self._signal(
            df_sys, fast, slow, trade=trade, df_price=df_entry)
        self.sys_ex = self._signal(
            df_sys, fast, slow, trade=trade, df_price=df_exit, signal="exit",
            price="close")

        # Checked to ensure no data is leaked in transformations.
        sys_entry = df_mid.merge(
            self.sys_en, how="left", left_index=True, right_on="entry_dt",
            validate="1:1")
        sys_entry.set_index("entry_dt", inplace=True)
        sys_entry_exit = sys_entry.merge(
            self.sys_ex, how="left", left_index=True, right_on="exit_dt",
            validate="1:1")
        sys_entry_exit.set_index("exit_dt", inplace=True)

        # Checked to ensure no data is leaked in transformations.
        sys_entry_exit["set_SL"] = sys_entry_exit.apply(self._set_SL,
                                                        SL=diff_SL, axis=1)
        set_SL_price = sys_entry_exit["set_SL"].fillna(method="ffill")
        sys_entry_exit.drop("set_SL", axis=1, inplace=True)
        self.sys_SL = sys_entry_exit.merge(
            set_SL_price, how="left", left_index=True, right_index=True,
            validate="1:1")
        
        df_exit.rename(columns={"low": "exit_low"}, inplace=True)
        self.SL_low = self.sys_SL.merge(
            df_exit, how="left", left_index=True, right_index=True,
            validate="1:1")

    @classmethod
    def sys_signals(cls, *args, **kwargs):
        """
        Fuction to return trades with entry and exit signals derived from a
        given SMA cross system.
        """
        n = cls(*args, **kwargs)
        d = []
        en = False
        signal_data = {}

        for row in n.sys_SL.iterrows():

            if row[1]["entry_type"] == "entry" and en is False:
                signal_data["entry_datetime"] = row[0]
                signal_data["entry_price"] = row[1]["entry_price"]
                en = True

            elif row[1]["exit_type"] == "exit" and en is True:
                signal_data["exit_datetime"] = row[0]
                signal_data["exit_price"] = row[1]["exit_price"]
                d.append(copy.deepcopy(signal_data))
                en = False

        return pd.DataFrame(d)

    @classmethod
    def set_stop_signals(cls, *args, **kwargs):
        """
        Fuction to return trades with entry signals derived from a given
        SMA cross system, and exit signals set by either the system or, if
        crossed, a stop loss limit x pips from the entry price.
        """
        n = cls(*args, **kwargs)
        n.SL_low["set_SL_exit_type"] = n.SL_low.apply(
            n._signal_SL, args=("set_SL",), axis=1)

        return n._gen_signal(n.SL_low, "set_SL_exit_type", "set_SL")

    @classmethod
    def atr_stop_signals(cls, df_prop, *args, ATR_multiplier=-3, **kwargs):
        """
        Fuction to return trades with entry signals derived from a given
        SMA cross system, and exit signals set by either the system or, if
        crossed, a stop loss limit x * ATR from the entry price.
        """
        n = cls(*args, **kwargs)
        # ATR values shifted for calculations, i.e. use previous sessions's ATR
        # to define current session's SL.
        atr_shift = df_prop["ATR"].shift(1)
        set_ATR_SL = n.SL_low.merge(
            atr_shift, how="left", left_index=True, right_index=True,
            validate="1:1")

        set_ATR_SL["prev_close"] = set_ATR_SL["close_x"].shift(1)
        set_ATR_SL["ATR_SL"] = set_ATR_SL.apply(
            n._set_ATR_SL, args=(ATR_multiplier,), axis=1)
        ATR_SL_price = set_ATR_SL["ATR_SL"].fillna(method="ffill")
        set_ATR_SL.drop("ATR_SL", axis=1, inplace=True)
        set_ATR_SL = set_ATR_SL.merge(
            ATR_SL_price, how="left", left_index=True, right_index=True,
            validate="1:1")
        set_ATR_SL["set_ATR_SL_exit_type"] = set_ATR_SL.apply(
            n._signal_SL, args=("ATR_SL",), axis=1)
        
        return n._gen_signal(set_ATR_SL, "set_ATR_SL_exit_type", "ATR_SL")

    def _signal(self, df_sys, fast, slow, trade="buy", df_price=None,
                signal="entry", price="open"):

        if trade == "buy":
            system = "{} > {}".format(fast, slow)
            en_ex = df_sys.apply(
                lambda x: signal if x[fast] > x[slow] else False, axis=1
                ).rename(system).to_frame()

        elif trade == "sell":
            system = "{} < {}".format(fast, slow)
            en_ex = df_sys.apply(
                lambda x: signal if x[fast] < x[slow] else False, axis=1
                ).rename(system).to_frame()

        en_ex["prev"] = en_ex[system].shift(2)
        en_ex["curr"] = en_ex[system].shift(1)

        en_ex[signal] = en_ex.apply(self._entry_exit, args=(signal,), axis=1)
        en_ex_prep = en_ex[en_ex[signal] == signal][signal].reset_index()

        en_ex_price = en_ex_prep.merge(
            df_price[price], how="left", left_on="index",
            right_index=True, validate="1:1")

        s = en_ex_price.rename(
            columns={"index": f"{signal}_dt", f"{price}": f"{signal}_price",
                     f"{signal}": f"{signal}_type"})

        return s

    def _entry_exit(self, row, action):

        if action == "entry":
            if row["prev"] is False and row["curr"] == action:
                return action

        elif action == "exit":
            if row["prev"] == action and row["curr"] is False:
                return action

    def _set_SL(self, row, SL=.0):

        if row["entry_type"] == "entry":
            limit = float(row["open"]) + SL
            return limit

        elif row["exit_type"] == "exit":
            return "exit"

    def _set_ATR_SL(self, row, multiplier):

        if isinstance(row["set_SL"], float):
            if row["close_x"] > row["prev_close"]:
                return float(row["open_x"]) + (row["ATR"] * multiplier)
            else:
                return np.nan
        else:
            return "exit"

    def _signal_SL(self, row, target):

        try:
            if float(row["exit_low"]) < row[target]:
                return "exit"
        except TypeError:
            return np.nan
        else:
            return np.nan

    def _gen_signal(self, df, target_type, target_price):

        d = []
        en = False
        signal_data = {}

        for row in df.iterrows():

            if row[1]["entry_type"] == "entry" and en is False:
                signal_data["entry_datetime"] = row[0]
                signal_data["entry_price"] = row[1]["entry_price"]
                en = True

            elif row[1][target_type] == "exit" and en is True:
                signal_data["exit_datetime"] = row[0]
                signal_data["exit_price"] = row[1][target_price]
                d.append(copy.deepcopy(signal_data))
                en = False

            elif row[1]["exit_type"] == "exit" and en is True:
                signal_data["exit_datetime"] = row[0]
                signal_data["exit_price"] = row[1]["exit_price"]
                d.append(copy.deepcopy(signal_data))
                en = False

        return pd.DataFrame(d)


def iky_cat(row):
    """
    To categorise the order in which ichimoku signal lines present with respect
    to each other.
    """
    ls = list(row.sort_values().index)
    cat = "_".join(ls)
    return cat


if __name__ == "__main__":
    """
    python htp/analyse/evaluate.py data/sma_3_6.csv
    """

    import sys
    import re
    data = pd.read_csv(sys.argv[1], header=0, names=["entry", "exit"],
                       index_col=0, parse_dates=True)
    entry_exit = signal_cross(data, data.columns[0], data.columns[1])
    sf = "entry_exit.csv".format()
    try:
        fn = "{0}_{1}".format(re.search(r"\/(.*?)\.csv", sys.argv[1]).group(1),
                              sf)
    except AttributeError:
        fn = sf
    entry_exit.to_csv("data/{0}".format(fn))
